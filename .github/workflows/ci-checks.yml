name: ci-checks

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_DEFAULT_REGION: eu-west-1
    AWS_ECR: 801465902363.dkr.ecr.eu-west-1.amazonaws.com

concurrency:
    group: ${{ github.head_ref || github.run_id }}
    cancel-in-progress: true

jobs:
    black: 
        runs-on: ubuntu-latest
        name: "running black"
        steps: 
        -   uses: actions/checkout@v3
        -   name: "Set up Python 3"
            uses: actions/setup-python@v4
            with: 
                python-version: '3.x'
        -   name: "Install dependencies"
            run: "pip install -r requirements_dev.txt"
        -   name: "Run black!"
            run: "black --check ."
    pylint: 
        runs-on: ubuntu-latest
        name: "running pylint"
        steps: 
        -   uses: actions/checkout@v3
        -   name: "Set up Python 3"
            uses: actions/setup-python@v4
            with: 
                python-version: '3.x'
        -   name: "Install dependencies"
            run: |
                pip install -r requirements.txt 
                pip install -r requirements_dev.txt
        -   name: "Run pylint!"
            run: "pylint mvg"
    flake8: 
        runs-on: ubuntu-latest
        name: "running flake8"
        steps: 
        -   uses: actions/checkout@v3
        -   name: "Set up Python 3"
            uses: actions/setup-python@v4
            with: 
                python-version: '3.x'
        -   name: "Install dependencies"
            run: "pip install -r requirements_dev.txt"
        -   name: "Run flake8!"
            run: "flake8 mvg"
    pytest:
        runs-on: ${{ matrix.os }}
        needs: [black, pylint, flake8]
        strategy:
            matrix:
                python-version: ["3.7","3.8","3.9","3.10","3.11"]
                os: [ubuntu-latest]
                include:
                -   python-version: 3.6
                    os: ubuntu-20.04
        steps: 
        -   uses: actions/checkout@v3
        -   name: "Set up Python ${{ matrix.python-version }}"
            uses: actions/setup-python@v4
            with: 
                python-version: "${{ matrix.python-version }}"
        -   name: "Install dependencies"
            run: |
                pip install -r requirements.txt
                pip install -r requirements_dev.txt
        -   name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_DEFAULT_REGION }}
        -   name: Log in to Amazon ECR
            uses: aws-actions/amazon-ecr-login@v1
        -   name: "Running tests with pytest"
            env:
                TEST_TOKEN: ${{ secrets.TEST_TOKEN }}
            run: "python -m pytest --cov-report term-missing --cov=mvg --durations=0 --verbose tests/ --ignore=tests/test_notebooks.py"
        -   name: Upload coverage to Codecov
            uses: codecov/codecov-action@v3
        -   name: Log out of Amazon ECR
            id: login-ecr
            if: always()
            run: docker logout ${{ steps.login-ecr.outputs.registry }}
    test-notebooks:
        runs-on: ${{ matrix.os }}
        needs: [black, pylint, flake8]
        strategy:
            matrix:
                python-version: ["3.7","3.8","3.9","3.10","3.11"]
                os: [ubuntu-latest]
                include:
                -   python-version: 3.6
                    os: ubuntu-20.04
        steps:
        -   uses: actions/checkout@v3
        -   name: "Set up Python ${{ matrix.python-version }}"
            uses: actions/setup-python@v4
            with: 
                python-version: "${{ matrix.python-version }}"
        -   name: "Install dependencies"
            run: |
                pip install -r requirements.txt
                pip install -r requirements_dev.txt
                pip install -r requirements_docs.txt
        -   name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_DEFAULT_REGION }}
        -   name: Log in to Amazon ECR
            uses: aws-actions/amazon-ecr-login@v1
        -   name: "Running tests with pytest"
            timeout-minutes: 120
            env:
                TEST_TOKEN: ${{ secrets.TEST_TOKEN }}
            run: "python -m pytest --verbose tests/test_notebooks.py"
        -   name: Log out of Amazon ECR
            id: login-ecr
            if: always()
            run: docker logout ${{ steps.login-ecr.outputs.registry }}
