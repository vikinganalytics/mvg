{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis Classes - a Unified Interface to Analysis Results\n",
    "\n",
    "MVG comes with a set of analysis classes which provide a unified interface to analysis results *irrespective of the specific feature*. Note that the analysis classes are helper classes, as such the mvg class does *not* depend on them.\n",
    "\n",
    "Except for step (1) requesting the specific feature analysis, the following generic workflow holds:\n",
    "- (1) Request a specific analysis\n",
    "- (2) Retrieve results and parse them into an analysis_class object\n",
    "- (3) Use generic methods like plot(), summary() or to_df()\n",
    "\n",
    "One application is to use the analysis classes interactively from a Python REPL session.\n",
    "\n",
    "#### Or in (pseudo) code\n",
    "```python\n",
    "result = parse_results(session.get_analysis_results(request_id))  # call API to get results\n",
    "result.plot() # plot results\n",
    "result.summary() # print summary table\n",
    "df = result.to_df() # convert to DataFrame\n",
    "result.save_pkl() # save to pickle file\n",
    "```\n",
    "\n",
    "### Prerequisites\n",
    "For running the examples in this notebook:\n",
    "* Installed mvg package\n",
    "* A token for API access from Viking Analytics\n",
    "* The database needs to be populated with our example assets. This can be achieved by running the [\"Sources and Measurement\"](sources_and_measurements.ipynb) example."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example flow\n",
    "\n",
    "### Importing the required packages, classes and functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:28.735704Z",
     "start_time": "2021-03-18T10:00:28.513699Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "from requests import HTTPError\n",
    "\n",
    "# import mvg library with python bindings to mvg-API\n",
    "from mvg import MVG, analysis_classes\n",
    "# import analysis classes\n",
    "from mvg.analysis_classes import parse_results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-04T10:59:02.619313Z",
     "start_time": "2021-03-04T10:59:02.615934Z"
    }
   },
   "source": [
    "### Create a Session and test API access\n",
    "\n",
    "Note that the `TOKEN` is used both for authorization and authentication. Thus, each unique token represents a unique user and each user has their own unique database on the Viking Analytics MultiViz Vibration service.\n",
    "\n",
    "**You need to insert your token received from Viking Analytics here:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:29.472021Z",
     "start_time": "2021-03-18T10:00:29.469799Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"api_version\": \"0.1.14\",\n",
      "    \"mvg_highest_tested_version\": \"0.1.12\",\n",
      "    \"mvg_version\": \"0.7.2\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Replace by your own Token\n",
    "TOKEN = os.environ[\"TEST_TOKEN\"] # use our own token\n",
    "ENDPOINT = \"https://api.beta.multiviz.com\"\n",
    "session = MVG(ENDPOINT, TOKEN)\n",
    "print(json.dumps(session.check_version(), indent=4)) # Check if API is accessible"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "###  Running the Analyses\n",
    "\n",
    "Once the API session is live, we start by checking if the source u0001 we will use is available in the database:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:32.804304Z",
     "start_time": "2021-03-18T10:00:32.800567Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"source_id\": \"u0001\",\n",
      "    \"meta\": {\n",
      "        \"assetId\": \"assetA\",\n",
      "        \"measPoint\": \"mloc01\",\n",
      "        \"location\": \"paris\"\n",
      "    },\n",
      "    \"properties\": {\n",
      "        \"data_class\": \"waveform\"\n",
      "    }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "SOURCE_ID = \"u0001\"\n",
    "s_info = session.get_source(SOURCE_ID)\n",
    "print(json.dumps(s_info, sort_keys=False, indent=4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Requsting the Analysis\n",
    "\n",
    "We will now request an analysis (first two lines, uncomment one of them) and wait for the results to become available. \n",
    "\n",
    "The results as returned will be stored in a dictionary named `raw_result`. The raw results are shown in the results cell, mainly to show that they are not optimized for readability or interpretation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:37.584243Z",
     "start_time": "2021-03-18T10:00:37.457555Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Waiting for {'request_id': 'bd831c060faf3d6ca5332be3f17c5c10', 'request_status': 'queued'}\n",
      "{\n",
      "    \"status\": \"successful\",\n",
      "    \"request_id\": \"bd831c060faf3d6ca5332be3f17c5c10\",\n",
      "    \"feature\": \"RMS\",\n",
      "    \"results\": {\n",
      "        \"timestamps\": [\n",
      "            1570186860,\n",
      "            1570273260,\n",
      "            1570359660,\n",
      "            1570446060,\n",
      "            1570532460,\n",
      "            1570618860,\n",
      "            1570705260,\n",
      "            1570791660,\n",
      "            1570878060,\n",
      "            1570964460,\n",
      "            1571050860,\n",
      "            1571137260,\n",
      "            1571223660,\n",
      "            1571310060,\n",
      "            1571396460,\n",
      "            1571482860,\n",
      "            1571569260,\n",
      "            1571655660,\n",
      "            1571742060,\n",
      "            1571828460,\n",
      "            1571914860,\n",
      "            1572001260,\n",
      "            1572087660,\n",
      "            1572177660,\n",
      "            1572264060,\n",
      "            1572350460,\n",
      "            1572436860,\n",
      "            1572523260,\n",
      "            1572609660,\n",
      "            1572696060,\n",
      "            1572782460,\n",
      "            1572868860,\n",
      "            1572955260,\n",
      "            1573041660,\n",
      "            1573128060,\n",
      "            1573214460,\n",
      "            1573300860,\n",
      "            1573387260,\n",
      "            1573473660,\n",
      "            1573560060,\n",
      "            1573646460,\n",
      "            1573732860,\n",
      "            1573819260,\n",
      "            1573905660,\n",
      "            1573992060,\n",
      "            1574078460,\n",
      "            1574164860,\n",
      "            1574251260,\n",
      "            1574337660,\n",
      "            1574424060\n",
      "        ],\n",
      "        \"rms\": [\n",
      "            0.6470859724128016,\n",
      "            0.6471233090087879,\n",
      "            0.646619032857862,\n",
      "            0.6468729279266723,\n",
      "            0.6466425188145082,\n",
      "            0.6467172058948399,\n",
      "            0.647092780648743,\n",
      "            0.6474220671843836,\n",
      "            0.6468903895762841,\n",
      "            0.647693834249824,\n",
      "            0.6470808565115449,\n",
      "            0.6472050737356421,\n",
      "            0.6467427853732736,\n",
      "            0.6473221821058892,\n",
      "            0.6474336931665059,\n",
      "            0.6476212217700601,\n",
      "            0.6471112840086092,\n",
      "            0.4848921153840439,\n",
      "            0.4848409433332954,\n",
      "            0.48475167234412847,\n",
      "            0.4845635972925419,\n",
      "            0.48500110983328193,\n",
      "            0.4850127179498178,\n",
      "            0.4852543654465155,\n",
      "            0.48515672855335834,\n",
      "            0.6278945984238401,\n",
      "            0.6281390462008573,\n",
      "            0.6283081249535378,\n",
      "            0.6280197922186224,\n",
      "            0.6280192424935522,\n",
      "            0.628283207129633,\n",
      "            0.6281522276066049,\n",
      "            0.6279655163885232,\n",
      "            0.6277353544965057,\n",
      "            0.6278700835347184,\n",
      "            0.6286806371261024,\n",
      "            0.6281269536708373,\n",
      "            0.6281217503270783,\n",
      "            0.6277798778644154,\n",
      "            0.6278461900382366,\n",
      "            0.6285363191287583,\n",
      "            0.6283971912344205,\n",
      "            0.628306637724784,\n",
      "            0.6281424042187251,\n",
      "            0.6285404729543972,\n",
      "            0.628117681739837,\n",
      "            0.6284285531715674,\n",
      "            0.6284407826182109,\n",
      "            0.6286006002142908,\n",
      "            0.6279629684369986\n",
      "        ],\n",
      "        \"rms_dc\": [\n",
      "            0.6621077357581335,\n",
      "            0.6621829958188445,\n",
      "            0.6616518915968526,\n",
      "            0.6619229399260815,\n",
      "            0.6617138187667061,\n",
      "            0.6617088713545417,\n",
      "            0.6621712182715772,\n",
      "            0.6624628340232414,\n",
      "            0.661977447702136,\n",
      "            0.6627544903873464,\n",
      "            0.6620207993082551,\n",
      "            0.662241081744421,\n",
      "            0.661799506359354,\n",
      "            0.6623544164712631,\n",
      "            0.6624120892580125,\n",
      "            0.6626660580828794,\n",
      "            0.6620974380917977,\n",
      "            0.498214159978348,\n",
      "            0.49823204245121355,\n",
      "            0.4981883248148897,\n",
      "            0.49798748569938905,\n",
      "            0.4983621583589863,\n",
      "            0.4983645131550537,\n",
      "            0.49866331698402155,\n",
      "            0.49849425732991726,\n",
      "            0.6374436148716767,\n",
      "            0.6377106362522227,\n",
      "            0.6377963245451337,\n",
      "            0.6375594045830764,\n",
      "            0.6374337096669657,\n",
      "            0.6378045217930529,\n",
      "            0.6376521190146351,\n",
      "            0.637442235802496,\n",
      "            0.6373332350391726,\n",
      "            0.6373635157843435,\n",
      "            0.6381945643264252,\n",
      "            0.6376292497131597,\n",
      "            0.6376899092541004,\n",
      "            0.6372860080258722,\n",
      "            0.6373424476924897,\n",
      "            0.6380636089021572,\n",
      "            0.637839000655549,\n",
      "            0.6377363375921016,\n",
      "            0.6376999348751861,\n",
      "            0.6381092936591727,\n",
      "            0.6376180440233918,\n",
      "            0.6378754730392424,\n",
      "            0.6378695336896755,\n",
      "            0.6379947683984636,\n",
      "            0.6373637582315667\n",
      "        ],\n",
      "        \"dc\": [\n",
      "            -0.1402369354248047,\n",
      "            -0.14041988067626954,\n",
      "            -0.14023926696777345,\n",
      "            -0.14034740295410156,\n",
      "            -0.14042304229736327,\n",
      "            -0.1400552963256836,\n",
      "            -0.1405050018310547,\n",
      "            -0.1403626495361328,\n",
      "            -0.14052389526367187,\n",
      "            -0.14048562774658202,\n",
      "            -0.13984957580566407,\n",
      "            -0.14031693725585936,\n",
      "            -0.14036508178710938,\n",
      "            -0.1403116729736328,\n",
      "            -0.14006922912597655,\n",
      "            -0.1404031967163086,\n",
      "            -0.14007142333984374,\n",
      "            -0.11444206237792968,\n",
      "            -0.11473634033203126,\n",
      "            -0.11492355346679688,\n",
      "            -0.11484622802734375,\n",
      "            -0.11462444915771484,\n",
      "            -0.11458556365966797,\n",
      "            -0.1148621109008789,\n",
      "            -0.11454026947021484,\n",
      "            -0.10992149658203125,\n",
      "            -0.11007358551025391,\n",
      "            -0.10960406799316406,\n",
      "            -0.10987781829833984,\n",
      "            -0.10914927978515625,\n",
      "            -0.10979444274902343,\n",
      "            -0.10965857849121094,\n",
      "            -0.10950759887695312,\n",
      "            -0.11019064025878907,\n",
      "            -0.10959657592773438,\n",
      "            -0.10978596649169922,\n",
      "            -0.10967037048339844,\n",
      "            -0.11005220184326171,\n",
      "            -0.10966257781982422,\n",
      "            -0.1096109359741211,\n",
      "            -0.10985110168457031,\n",
      "            -0.10934148712158204,\n",
      "            -0.10926300964355469,\n",
      "            -0.10999239501953124,\n",
      "            -0.11009243621826172,\n",
      "            -0.1096583236694336,\n",
      "            -0.10937400360107422,\n",
      "            -0.10926904754638672,\n",
      "            -0.10908074951171876,\n",
      "            -0.10906452484130859\n",
      "        ],\n",
      "        \"utilization\": [\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1,\n",
      "            1\n",
      "        ]\n",
      "    },\n",
      "    \"inputs\": {\n",
      "        \"request_id\": \"bd831c060faf3d6ca5332be3f17c5c10\",\n",
      "        \"feature\": \"RMS\",\n",
      "        \"experiment\": \"RMS\",\n",
      "        \"sw-commit\": {\n",
      "            \"api\": \"v0.1.14\",\n",
      "            \"feature\": \"1.0.0\"\n",
      "        },\n",
      "        \"dataType\": \"waveform\",\n",
      "        \"db_def\": \"/pipeline/apfel/strudel/data/strudelDb/database.json\",\n",
      "        \"UUID\": \"u0001\",\n",
      "        \"timestamps\": [\n",
      "            1570186860,\n",
      "            1570273260,\n",
      "            1570359660,\n",
      "            1570446060,\n",
      "            1570532460,\n",
      "            1570618860,\n",
      "            1570705260,\n",
      "            1570791660,\n",
      "            1570878060,\n",
      "            1570964460,\n",
      "            1571050860,\n",
      "            1571137260,\n",
      "            1571223660,\n",
      "            1571310060,\n",
      "            1571396460,\n",
      "            1571482860,\n",
      "            1571569260,\n",
      "            1571655660,\n",
      "            1571742060,\n",
      "            1571828460,\n",
      "            1571914860,\n",
      "            1572001260,\n",
      "            1572087660,\n",
      "            1572177660,\n",
      "            1572264060,\n",
      "            1572350460,\n",
      "            1572436860,\n",
      "            1572523260,\n",
      "            1572609660,\n",
      "            1572696060,\n",
      "            1572782460,\n",
      "            1572868860,\n",
      "            1572955260,\n",
      "            1573041660,\n",
      "            1573128060,\n",
      "            1573214460,\n",
      "            1573300860,\n",
      "            1573387260,\n",
      "            1573473660,\n",
      "            1573560060,\n",
      "            1573646460,\n",
      "            1573732860,\n",
      "            1573819260,\n",
      "            1573905660,\n",
      "            1573992060,\n",
      "            1574078460,\n",
      "            1574164860,\n",
      "            1574251260,\n",
      "            1574337660,\n",
      "            1574424060\n",
      "        ],\n",
      "        \"params\": {\n",
      "            \"utilization_threshold\": 0.1\n",
      "        }\n",
      "    },\n",
      "    \"error_info\": \"\",\n",
      "    \"debug_info\": \"\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Specifc part : Select one of two anlysis here by un/commenting\n",
    "selected_feature = \"RMS\"\n",
    "# selected_feature = \"ModeId\"\n",
    "\n",
    "# Generic Part: request analysis and wait for results\n",
    "analysis_request = session.request_analysis(SOURCE_ID, selected_feature)\n",
    "print(f\"Waiting for {analysis_request}\")\n",
    "session.wait_for_analyses([analysis_request[\"request_id\"]])\n",
    "\n",
    "# Generic Part: Displaying unparsed results\n",
    "raw_result = session.get_analysis_results(analysis_request[\"request_id\"])\n",
    "print(json.dumps(raw_result, sort_keys=False, indent=4)) # Pretty but pretty long"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Showing and Browsing the results using analysis_classes\n",
    "To make the results more accessible, we'll use the analysis_classes. The parse_results function will take the raw_results of (any) analysis and represent them in a python object with a number of convenience methods for summarising, plotting and exporting. For the full list of provided methods check __[the documentation](https://vikinganalytics.github.io/mvg/content/utilities_reference/analysis_classes.html)__.\n",
    "\n",
    "The parse function will automatically determine the kind (feature) of analysis based on the raw_results.\n",
    "Once the results are parsed, we can summarize them using the summary() method *irrespective of which analysis them stem from*. To verify this you can rerun the cell above by selecting another feature for the analysis.\n",
    "\n",
    "#### Timestamps\n",
    "The Vibration API requires timestamps to be represented in EPOCH time. To display human interpertable timestamps a timezone and a time unit (specifying if the timestamps are seconds 's' or milliseconds 'ms' from EPOCH). This information can be given in the parse_results calls 2nd and 3rd argument). If they are left blank EPOCH times are kept.\n",
    "When exporting the results to a DataFrame, a column called \"datetime\" will be appended to show the human interpretable times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:38.637859Z",
     "start_time": "2021-03-18T10:00:38.499851Z"
    },
    "pycharm": {
     "name": "#%%\n"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== RMS ===\n",
      "request_id bd831c060faf3d6ca5332be3f17c5c10\n",
      "from 1570186860 to 1574424060\n",
      "\n",
      "+-------+--------------+------------+------------+------------+---------------+\n",
      "|       |   timestamps |        rms |     rms_dc |         dc |   utilization |\n",
      "|-------+--------------+------------+------------+------------+---------------|\n",
      "| count | 50           | 50         | 50         | 50         |            50 |\n",
      "| mean  |  1.57231e+09 |  0.611691  |  0.623692  | -0.120874  |             1 |\n",
      "| std   |  1.26105e+06 |  0.0565414 |  0.0563824 |  0.0141936 |             0 |\n",
      "| min   |  1.57019e+09 |  0.484564  |  0.497987  | -0.140524  |             1 |\n",
      "| 25%   |  1.57125e+09 |  0.627912  |  0.637381  | -0.140196  |             1 |\n",
      "| 50%   |  1.57231e+09 |  0.628307  |  0.6378    | -0.112316  |             1 |\n",
      "| 75%   |  1.57337e+09 |  0.64684   |  0.661892  | -0.10966   |             1 |\n",
      "| max   |  1.57442e+09 |  0.647694  |  0.662754  | -0.109065  |             1 |\n",
      "+-------+--------------+------------+------------+------------+---------------+\n"
     ]
    },
    {
     "data": {
      "text/plain": "         timestamps        rms     rms_dc         dc  utilization\ncount  5.000000e+01  50.000000  50.000000  50.000000         50.0\nmean   1.572306e+09   0.611691   0.623692  -0.120874          1.0\nstd    1.261051e+06   0.056541   0.056382   0.014194          0.0\nmin    1.570187e+09   0.484564   0.497987  -0.140524          1.0\n25%    1.571245e+09   0.627912   0.637381  -0.140196          1.0\n50%    1.572307e+09   0.628307   0.637800  -0.112316          1.0\n75%    1.573366e+09   0.646840   0.661892  -0.109660          1.0\nmax    1.574424e+09   0.647694   0.662754  -0.109065          1.0",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>timestamps</th>\n      <th>rms</th>\n      <th>rms_dc</th>\n      <th>dc</th>\n      <th>utilization</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5.000000e+01</td>\n      <td>50.000000</td>\n      <td>50.000000</td>\n      <td>50.000000</td>\n      <td>50.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.572306e+09</td>\n      <td>0.611691</td>\n      <td>0.623692</td>\n      <td>-0.120874</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.261051e+06</td>\n      <td>0.056541</td>\n      <td>0.056382</td>\n      <td>0.014194</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.570187e+09</td>\n      <td>0.484564</td>\n      <td>0.497987</td>\n      <td>-0.140524</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.571245e+09</td>\n      <td>0.627912</td>\n      <td>0.637381</td>\n      <td>-0.140196</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.572307e+09</td>\n      <td>0.628307</td>\n      <td>0.637800</td>\n      <td>-0.112316</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.573366e+09</td>\n      <td>0.646840</td>\n      <td>0.661892</td>\n      <td>-0.109660</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.574424e+09</td>\n      <td>0.647694</td>\n      <td>0.662754</td>\n      <td>-0.109065</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Parse\n",
    "pretty_result = parse_results(raw_result, \"Europe/Stockholm\", \"s\")\n",
    "# pretty_result = parse_results(raw_result) # show only raw timestamps\n",
    "# Show summary\n",
    "pretty_result.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting\n",
    "For visual representation of the results there is the 'plot' method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:43.435603Z",
     "start_time": "2021-03-18T10:00:43.172181Z"
    },
    "pycharm": {
     "name": "#%%\n"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "''"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pretty_result.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Export results to DataFrame\n",
    "The to_df() method will export results to a DataFrame. Note that the format of the DataFrame depends on the specific analysis and that not all of the results can be represented as a data frame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:44.400481Z",
     "start_time": "2021-03-18T10:00:44.261231Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "    timestamps       rms    rms_dc        dc  utilization  \\\n0   1570186860  0.647086  0.662108 -0.140237            1   \n1   1570273260  0.647123  0.662183 -0.140420            1   \n2   1570359660  0.646619  0.661652 -0.140239            1   \n3   1570446060  0.646873  0.661923 -0.140347            1   \n4   1570532460  0.646643  0.661714 -0.140423            1   \n5   1570618860  0.646717  0.661709 -0.140055            1   \n6   1570705260  0.647093  0.662171 -0.140505            1   \n7   1570791660  0.647422  0.662463 -0.140363            1   \n8   1570878060  0.646890  0.661977 -0.140524            1   \n9   1570964460  0.647694  0.662754 -0.140486            1   \n10  1571050860  0.647081  0.662021 -0.139850            1   \n11  1571137260  0.647205  0.662241 -0.140317            1   \n12  1571223660  0.646743  0.661800 -0.140365            1   \n13  1571310060  0.647322  0.662354 -0.140312            1   \n14  1571396460  0.647434  0.662412 -0.140069            1   \n15  1571482860  0.647621  0.662666 -0.140403            1   \n16  1571569260  0.647111  0.662097 -0.140071            1   \n17  1571655660  0.484892  0.498214 -0.114442            1   \n18  1571742060  0.484841  0.498232 -0.114736            1   \n19  1571828460  0.484752  0.498188 -0.114924            1   \n20  1571914860  0.484564  0.497987 -0.114846            1   \n21  1572001260  0.485001  0.498362 -0.114624            1   \n22  1572087660  0.485013  0.498365 -0.114586            1   \n23  1572177660  0.485254  0.498663 -0.114862            1   \n24  1572264060  0.485157  0.498494 -0.114540            1   \n25  1572350460  0.627895  0.637444 -0.109921            1   \n26  1572436860  0.628139  0.637711 -0.110074            1   \n27  1572523260  0.628308  0.637796 -0.109604            1   \n28  1572609660  0.628020  0.637559 -0.109878            1   \n29  1572696060  0.628019  0.637434 -0.109149            1   \n30  1572782460  0.628283  0.637805 -0.109794            1   \n31  1572868860  0.628152  0.637652 -0.109659            1   \n32  1572955260  0.627966  0.637442 -0.109508            1   \n33  1573041660  0.627735  0.637333 -0.110191            1   \n34  1573128060  0.627870  0.637364 -0.109597            1   \n35  1573214460  0.628681  0.638195 -0.109786            1   \n36  1573300860  0.628127  0.637629 -0.109670            1   \n37  1573387260  0.628122  0.637690 -0.110052            1   \n38  1573473660  0.627780  0.637286 -0.109663            1   \n39  1573560060  0.627846  0.637342 -0.109611            1   \n40  1573646460  0.628536  0.638064 -0.109851            1   \n41  1573732860  0.628397  0.637839 -0.109341            1   \n42  1573819260  0.628307  0.637736 -0.109263            1   \n43  1573905660  0.628142  0.637700 -0.109992            1   \n44  1573992060  0.628540  0.638109 -0.110092            1   \n45  1574078460  0.628118  0.637618 -0.109658            1   \n46  1574164860  0.628429  0.637875 -0.109374            1   \n47  1574251260  0.628441  0.637870 -0.109269            1   \n48  1574337660  0.628601  0.637995 -0.109081            1   \n49  1574424060  0.627963  0.637364 -0.109065            1   \n\n                    datetime  \n0  2019-10-04 13:01:00+02:00  \n1  2019-10-05 13:01:00+02:00  \n2  2019-10-06 13:01:00+02:00  \n3  2019-10-07 13:01:00+02:00  \n4  2019-10-08 13:01:00+02:00  \n5  2019-10-09 13:01:00+02:00  \n6  2019-10-10 13:01:00+02:00  \n7  2019-10-11 13:01:00+02:00  \n8  2019-10-12 13:01:00+02:00  \n9  2019-10-13 13:01:00+02:00  \n10 2019-10-14 13:01:00+02:00  \n11 2019-10-15 13:01:00+02:00  \n12 2019-10-16 13:01:00+02:00  \n13 2019-10-17 13:01:00+02:00  \n14 2019-10-18 13:01:00+02:00  \n15 2019-10-19 13:01:00+02:00  \n16 2019-10-20 13:01:00+02:00  \n17 2019-10-21 13:01:00+02:00  \n18 2019-10-22 13:01:00+02:00  \n19 2019-10-23 13:01:00+02:00  \n20 2019-10-24 13:01:00+02:00  \n21 2019-10-25 13:01:00+02:00  \n22 2019-10-26 13:01:00+02:00  \n23 2019-10-27 13:01:00+01:00  \n24 2019-10-28 13:01:00+01:00  \n25 2019-10-29 13:01:00+01:00  \n26 2019-10-30 13:01:00+01:00  \n27 2019-10-31 13:01:00+01:00  \n28 2019-11-01 13:01:00+01:00  \n29 2019-11-02 13:01:00+01:00  \n30 2019-11-03 13:01:00+01:00  \n31 2019-11-04 13:01:00+01:00  \n32 2019-11-05 13:01:00+01:00  \n33 2019-11-06 13:01:00+01:00  \n34 2019-11-07 13:01:00+01:00  \n35 2019-11-08 13:01:00+01:00  \n36 2019-11-09 13:01:00+01:00  \n37 2019-11-10 13:01:00+01:00  \n38 2019-11-11 13:01:00+01:00  \n39 2019-11-12 13:01:00+01:00  \n40 2019-11-13 13:01:00+01:00  \n41 2019-11-14 13:01:00+01:00  \n42 2019-11-15 13:01:00+01:00  \n43 2019-11-16 13:01:00+01:00  \n44 2019-11-17 13:01:00+01:00  \n45 2019-11-18 13:01:00+01:00  \n46 2019-11-19 13:01:00+01:00  \n47 2019-11-20 13:01:00+01:00  \n48 2019-11-21 13:01:00+01:00  \n49 2019-11-22 13:01:00+01:00  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>timestamps</th>\n      <th>rms</th>\n      <th>rms_dc</th>\n      <th>dc</th>\n      <th>utilization</th>\n      <th>datetime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1570186860</td>\n      <td>0.647086</td>\n      <td>0.662108</td>\n      <td>-0.140237</td>\n      <td>1</td>\n      <td>2019-10-04 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1570273260</td>\n      <td>0.647123</td>\n      <td>0.662183</td>\n      <td>-0.140420</td>\n      <td>1</td>\n      <td>2019-10-05 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1570359660</td>\n      <td>0.646619</td>\n      <td>0.661652</td>\n      <td>-0.140239</td>\n      <td>1</td>\n      <td>2019-10-06 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1570446060</td>\n      <td>0.646873</td>\n      <td>0.661923</td>\n      <td>-0.140347</td>\n      <td>1</td>\n      <td>2019-10-07 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1570532460</td>\n      <td>0.646643</td>\n      <td>0.661714</td>\n      <td>-0.140423</td>\n      <td>1</td>\n      <td>2019-10-08 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1570618860</td>\n      <td>0.646717</td>\n      <td>0.661709</td>\n      <td>-0.140055</td>\n      <td>1</td>\n      <td>2019-10-09 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1570705260</td>\n      <td>0.647093</td>\n      <td>0.662171</td>\n      <td>-0.140505</td>\n      <td>1</td>\n      <td>2019-10-10 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1570791660</td>\n      <td>0.647422</td>\n      <td>0.662463</td>\n      <td>-0.140363</td>\n      <td>1</td>\n      <td>2019-10-11 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1570878060</td>\n      <td>0.646890</td>\n      <td>0.661977</td>\n      <td>-0.140524</td>\n      <td>1</td>\n      <td>2019-10-12 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1570964460</td>\n      <td>0.647694</td>\n      <td>0.662754</td>\n      <td>-0.140486</td>\n      <td>1</td>\n      <td>2019-10-13 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1571050860</td>\n      <td>0.647081</td>\n      <td>0.662021</td>\n      <td>-0.139850</td>\n      <td>1</td>\n      <td>2019-10-14 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1571137260</td>\n      <td>0.647205</td>\n      <td>0.662241</td>\n      <td>-0.140317</td>\n      <td>1</td>\n      <td>2019-10-15 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1571223660</td>\n      <td>0.646743</td>\n      <td>0.661800</td>\n      <td>-0.140365</td>\n      <td>1</td>\n      <td>2019-10-16 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>1571310060</td>\n      <td>0.647322</td>\n      <td>0.662354</td>\n      <td>-0.140312</td>\n      <td>1</td>\n      <td>2019-10-17 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1571396460</td>\n      <td>0.647434</td>\n      <td>0.662412</td>\n      <td>-0.140069</td>\n      <td>1</td>\n      <td>2019-10-18 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1571482860</td>\n      <td>0.647621</td>\n      <td>0.662666</td>\n      <td>-0.140403</td>\n      <td>1</td>\n      <td>2019-10-19 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>1571569260</td>\n      <td>0.647111</td>\n      <td>0.662097</td>\n      <td>-0.140071</td>\n      <td>1</td>\n      <td>2019-10-20 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1571655660</td>\n      <td>0.484892</td>\n      <td>0.498214</td>\n      <td>-0.114442</td>\n      <td>1</td>\n      <td>2019-10-21 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>1571742060</td>\n      <td>0.484841</td>\n      <td>0.498232</td>\n      <td>-0.114736</td>\n      <td>1</td>\n      <td>2019-10-22 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>1571828460</td>\n      <td>0.484752</td>\n      <td>0.498188</td>\n      <td>-0.114924</td>\n      <td>1</td>\n      <td>2019-10-23 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>1571914860</td>\n      <td>0.484564</td>\n      <td>0.497987</td>\n      <td>-0.114846</td>\n      <td>1</td>\n      <td>2019-10-24 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>1572001260</td>\n      <td>0.485001</td>\n      <td>0.498362</td>\n      <td>-0.114624</td>\n      <td>1</td>\n      <td>2019-10-25 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>1572087660</td>\n      <td>0.485013</td>\n      <td>0.498365</td>\n      <td>-0.114586</td>\n      <td>1</td>\n      <td>2019-10-26 13:01:00+02:00</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>1572177660</td>\n      <td>0.485254</td>\n      <td>0.498663</td>\n      <td>-0.114862</td>\n      <td>1</td>\n      <td>2019-10-27 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>1572264060</td>\n      <td>0.485157</td>\n      <td>0.498494</td>\n      <td>-0.114540</td>\n      <td>1</td>\n      <td>2019-10-28 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>1572350460</td>\n      <td>0.627895</td>\n      <td>0.637444</td>\n      <td>-0.109921</td>\n      <td>1</td>\n      <td>2019-10-29 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>1572436860</td>\n      <td>0.628139</td>\n      <td>0.637711</td>\n      <td>-0.110074</td>\n      <td>1</td>\n      <td>2019-10-30 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>1572523260</td>\n      <td>0.628308</td>\n      <td>0.637796</td>\n      <td>-0.109604</td>\n      <td>1</td>\n      <td>2019-10-31 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>1572609660</td>\n      <td>0.628020</td>\n      <td>0.637559</td>\n      <td>-0.109878</td>\n      <td>1</td>\n      <td>2019-11-01 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>1572696060</td>\n      <td>0.628019</td>\n      <td>0.637434</td>\n      <td>-0.109149</td>\n      <td>1</td>\n      <td>2019-11-02 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>1572782460</td>\n      <td>0.628283</td>\n      <td>0.637805</td>\n      <td>-0.109794</td>\n      <td>1</td>\n      <td>2019-11-03 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>1572868860</td>\n      <td>0.628152</td>\n      <td>0.637652</td>\n      <td>-0.109659</td>\n      <td>1</td>\n      <td>2019-11-04 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>1572955260</td>\n      <td>0.627966</td>\n      <td>0.637442</td>\n      <td>-0.109508</td>\n      <td>1</td>\n      <td>2019-11-05 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>1573041660</td>\n      <td>0.627735</td>\n      <td>0.637333</td>\n      <td>-0.110191</td>\n      <td>1</td>\n      <td>2019-11-06 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>1573128060</td>\n      <td>0.627870</td>\n      <td>0.637364</td>\n      <td>-0.109597</td>\n      <td>1</td>\n      <td>2019-11-07 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>1573214460</td>\n      <td>0.628681</td>\n      <td>0.638195</td>\n      <td>-0.109786</td>\n      <td>1</td>\n      <td>2019-11-08 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>1573300860</td>\n      <td>0.628127</td>\n      <td>0.637629</td>\n      <td>-0.109670</td>\n      <td>1</td>\n      <td>2019-11-09 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>1573387260</td>\n      <td>0.628122</td>\n      <td>0.637690</td>\n      <td>-0.110052</td>\n      <td>1</td>\n      <td>2019-11-10 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>1573473660</td>\n      <td>0.627780</td>\n      <td>0.637286</td>\n      <td>-0.109663</td>\n      <td>1</td>\n      <td>2019-11-11 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>1573560060</td>\n      <td>0.627846</td>\n      <td>0.637342</td>\n      <td>-0.109611</td>\n      <td>1</td>\n      <td>2019-11-12 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>1573646460</td>\n      <td>0.628536</td>\n      <td>0.638064</td>\n      <td>-0.109851</td>\n      <td>1</td>\n      <td>2019-11-13 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>1573732860</td>\n      <td>0.628397</td>\n      <td>0.637839</td>\n      <td>-0.109341</td>\n      <td>1</td>\n      <td>2019-11-14 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>1573819260</td>\n      <td>0.628307</td>\n      <td>0.637736</td>\n      <td>-0.109263</td>\n      <td>1</td>\n      <td>2019-11-15 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>1573905660</td>\n      <td>0.628142</td>\n      <td>0.637700</td>\n      <td>-0.109992</td>\n      <td>1</td>\n      <td>2019-11-16 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>1573992060</td>\n      <td>0.628540</td>\n      <td>0.638109</td>\n      <td>-0.110092</td>\n      <td>1</td>\n      <td>2019-11-17 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>1574078460</td>\n      <td>0.628118</td>\n      <td>0.637618</td>\n      <td>-0.109658</td>\n      <td>1</td>\n      <td>2019-11-18 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>1574164860</td>\n      <td>0.628429</td>\n      <td>0.637875</td>\n      <td>-0.109374</td>\n      <td>1</td>\n      <td>2019-11-19 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>1574251260</td>\n      <td>0.628441</td>\n      <td>0.637870</td>\n      <td>-0.109269</td>\n      <td>1</td>\n      <td>2019-11-20 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>1574337660</td>\n      <td>0.628601</td>\n      <td>0.637995</td>\n      <td>-0.109081</td>\n      <td>1</td>\n      <td>2019-11-21 13:01:00+01:00</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>1574424060</td>\n      <td>0.627963</td>\n      <td>0.637364</td>\n      <td>-0.109065</td>\n      <td>1</td>\n      <td>2019-11-22 13:01:00+01:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pretty_result.to_df()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Full results\n",
    "In case the full server results are needed in the form they were returned, we can obtain them with the results() method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:48.331542Z",
     "start_time": "2021-03-18T10:00:47.324848Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"timestamps\": [\n",
      "        1570186860,\n",
      "        1570273260,\n",
      "        1570359660,\n",
      "        1570446060,\n",
      "        1570532460,\n",
      "        1570618860,\n",
      "        1570705260,\n",
      "        1570791660,\n",
      "        1570878060,\n",
      "        1570964460,\n",
      "        1571050860,\n",
      "        1571137260,\n",
      "        1571223660,\n",
      "        1571310060,\n",
      "        1571396460,\n",
      "        1571482860,\n",
      "        1571569260,\n",
      "        1571655660,\n",
      "        1571742060,\n",
      "        1571828460,\n",
      "        1571914860,\n",
      "        1572001260,\n",
      "        1572087660,\n",
      "        1572177660,\n",
      "        1572264060,\n",
      "        1572350460,\n",
      "        1572436860,\n",
      "        1572523260,\n",
      "        1572609660,\n",
      "        1572696060,\n",
      "        1572782460,\n",
      "        1572868860,\n",
      "        1572955260,\n",
      "        1573041660,\n",
      "        1573128060,\n",
      "        1573214460,\n",
      "        1573300860,\n",
      "        1573387260,\n",
      "        1573473660,\n",
      "        1573560060,\n",
      "        1573646460,\n",
      "        1573732860,\n",
      "        1573819260,\n",
      "        1573905660,\n",
      "        1573992060,\n",
      "        1574078460,\n",
      "        1574164860,\n",
      "        1574251260,\n",
      "        1574337660,\n",
      "        1574424060\n",
      "    ],\n",
      "    \"rms\": [\n",
      "        0.6470859724128016,\n",
      "        0.6471233090087879,\n",
      "        0.646619032857862,\n",
      "        0.6468729279266723,\n",
      "        0.6466425188145082,\n",
      "        0.6467172058948399,\n",
      "        0.647092780648743,\n",
      "        0.6474220671843836,\n",
      "        0.6468903895762841,\n",
      "        0.647693834249824,\n",
      "        0.6470808565115449,\n",
      "        0.6472050737356421,\n",
      "        0.6467427853732736,\n",
      "        0.6473221821058892,\n",
      "        0.6474336931665059,\n",
      "        0.6476212217700601,\n",
      "        0.6471112840086092,\n",
      "        0.4848921153840439,\n",
      "        0.4848409433332954,\n",
      "        0.48475167234412847,\n",
      "        0.4845635972925419,\n",
      "        0.48500110983328193,\n",
      "        0.4850127179498178,\n",
      "        0.4852543654465155,\n",
      "        0.48515672855335834,\n",
      "        0.6278945984238401,\n",
      "        0.6281390462008573,\n",
      "        0.6283081249535378,\n",
      "        0.6280197922186224,\n",
      "        0.6280192424935522,\n",
      "        0.628283207129633,\n",
      "        0.6281522276066049,\n",
      "        0.6279655163885232,\n",
      "        0.6277353544965057,\n",
      "        0.6278700835347184,\n",
      "        0.6286806371261024,\n",
      "        0.6281269536708373,\n",
      "        0.6281217503270783,\n",
      "        0.6277798778644154,\n",
      "        0.6278461900382366,\n",
      "        0.6285363191287583,\n",
      "        0.6283971912344205,\n",
      "        0.628306637724784,\n",
      "        0.6281424042187251,\n",
      "        0.6285404729543972,\n",
      "        0.628117681739837,\n",
      "        0.6284285531715674,\n",
      "        0.6284407826182109,\n",
      "        0.6286006002142908,\n",
      "        0.6279629684369986\n",
      "    ],\n",
      "    \"rms_dc\": [\n",
      "        0.6621077357581335,\n",
      "        0.6621829958188445,\n",
      "        0.6616518915968526,\n",
      "        0.6619229399260815,\n",
      "        0.6617138187667061,\n",
      "        0.6617088713545417,\n",
      "        0.6621712182715772,\n",
      "        0.6624628340232414,\n",
      "        0.661977447702136,\n",
      "        0.6627544903873464,\n",
      "        0.6620207993082551,\n",
      "        0.662241081744421,\n",
      "        0.661799506359354,\n",
      "        0.6623544164712631,\n",
      "        0.6624120892580125,\n",
      "        0.6626660580828794,\n",
      "        0.6620974380917977,\n",
      "        0.498214159978348,\n",
      "        0.49823204245121355,\n",
      "        0.4981883248148897,\n",
      "        0.49798748569938905,\n",
      "        0.4983621583589863,\n",
      "        0.4983645131550537,\n",
      "        0.49866331698402155,\n",
      "        0.49849425732991726,\n",
      "        0.6374436148716767,\n",
      "        0.6377106362522227,\n",
      "        0.6377963245451337,\n",
      "        0.6375594045830764,\n",
      "        0.6374337096669657,\n",
      "        0.6378045217930529,\n",
      "        0.6376521190146351,\n",
      "        0.637442235802496,\n",
      "        0.6373332350391726,\n",
      "        0.6373635157843435,\n",
      "        0.6381945643264252,\n",
      "        0.6376292497131597,\n",
      "        0.6376899092541004,\n",
      "        0.6372860080258722,\n",
      "        0.6373424476924897,\n",
      "        0.6380636089021572,\n",
      "        0.637839000655549,\n",
      "        0.6377363375921016,\n",
      "        0.6376999348751861,\n",
      "        0.6381092936591727,\n",
      "        0.6376180440233918,\n",
      "        0.6378754730392424,\n",
      "        0.6378695336896755,\n",
      "        0.6379947683984636,\n",
      "        0.6373637582315667\n",
      "    ],\n",
      "    \"dc\": [\n",
      "        -0.1402369354248047,\n",
      "        -0.14041988067626954,\n",
      "        -0.14023926696777345,\n",
      "        -0.14034740295410156,\n",
      "        -0.14042304229736327,\n",
      "        -0.1400552963256836,\n",
      "        -0.1405050018310547,\n",
      "        -0.1403626495361328,\n",
      "        -0.14052389526367187,\n",
      "        -0.14048562774658202,\n",
      "        -0.13984957580566407,\n",
      "        -0.14031693725585936,\n",
      "        -0.14036508178710938,\n",
      "        -0.1403116729736328,\n",
      "        -0.14006922912597655,\n",
      "        -0.1404031967163086,\n",
      "        -0.14007142333984374,\n",
      "        -0.11444206237792968,\n",
      "        -0.11473634033203126,\n",
      "        -0.11492355346679688,\n",
      "        -0.11484622802734375,\n",
      "        -0.11462444915771484,\n",
      "        -0.11458556365966797,\n",
      "        -0.1148621109008789,\n",
      "        -0.11454026947021484,\n",
      "        -0.10992149658203125,\n",
      "        -0.11007358551025391,\n",
      "        -0.10960406799316406,\n",
      "        -0.10987781829833984,\n",
      "        -0.10914927978515625,\n",
      "        -0.10979444274902343,\n",
      "        -0.10965857849121094,\n",
      "        -0.10950759887695312,\n",
      "        -0.11019064025878907,\n",
      "        -0.10959657592773438,\n",
      "        -0.10978596649169922,\n",
      "        -0.10967037048339844,\n",
      "        -0.11005220184326171,\n",
      "        -0.10966257781982422,\n",
      "        -0.1096109359741211,\n",
      "        -0.10985110168457031,\n",
      "        -0.10934148712158204,\n",
      "        -0.10926300964355469,\n",
      "        -0.10999239501953124,\n",
      "        -0.11009243621826172,\n",
      "        -0.1096583236694336,\n",
      "        -0.10937400360107422,\n",
      "        -0.10926904754638672,\n",
      "        -0.10908074951171876,\n",
      "        -0.10906452484130859\n",
      "    ],\n",
      "    \"utilization\": [\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1,\n",
      "        1\n",
      "    ]\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "print(json.dumps(pretty_result.results(), sort_keys=False, indent=4)) # Pretty but long"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Black Sheep Analysis example\n",
    "\n",
    "The BlackSheep is a population analysis and has a somewhat different call signature as it requires a number of assets to be submitted to analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:51.412234Z",
     "start_time": "2021-03-18T10:00:50.909661Z"
    },
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Waiting for {'request_id': '8f45d56950eea95e8382b57d1aec5746', 'request_status': 'queued'}\n",
      "{\n",
      "    \"status\": \"successful\",\n",
      "    \"request_id\": \"8f45d56950eea95e8382b57d1aec5746\",\n",
      "    \"feature\": \"BlackSheep\",\n",
      "    \"results\": {\n",
      "        \"atypical_assets\": [\n",
      "            {\n",
      "                \"timestamps\": [\n",
      "                    1570186860,\n",
      "                    1570273260,\n",
      "                    1570359660,\n",
      "                    1570446060,\n",
      "                    1570532460,\n",
      "                    1570618860,\n",
      "                    1570705260,\n",
      "                    1570791660,\n",
      "                    1570878060,\n",
      "                    1570964460,\n",
      "                    1571050860,\n",
      "                    1571137260,\n",
      "                    1571223660,\n",
      "                    1571310060,\n",
      "                    1571396460,\n",
      "                    1571482860,\n",
      "                    1571569260,\n",
      "                    1571655660,\n",
      "                    1571742060,\n",
      "                    1571828460,\n",
      "                    1571914860,\n",
      "                    1572001260,\n",
      "                    1572087660,\n",
      "                    1572177660,\n",
      "                    1572264060,\n",
      "                    1572350460,\n",
      "                    1572436860,\n",
      "                    1572523260,\n",
      "                    1572609660,\n",
      "                    1572696060,\n",
      "                    1572782460,\n",
      "                    1572868860,\n",
      "                    1572955260,\n",
      "                    1573041660,\n",
      "                    1573128060,\n",
      "                    1573214460,\n",
      "                    1573300860,\n",
      "                    1573387260,\n",
      "                    1573473660,\n",
      "                    1573560060,\n",
      "                    1573646460,\n",
      "                    1573732860,\n",
      "                    1573819260,\n",
      "                    1573905660,\n",
      "                    1573992060,\n",
      "                    1574078460,\n",
      "                    1574164860,\n",
      "                    1574251260,\n",
      "                    1574337660,\n",
      "                    1574424060\n",
      "                ],\n",
      "                \"labels\": [\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1,\n",
      "                    1\n",
      "                ],\n",
      "                \"atypical\": [\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false\n",
      "                ],\n",
      "                \"source_id\": \"u0003\"\n",
      "            },\n",
      "            {\n",
      "                \"timestamps\": [\n",
      "                    1570186860,\n",
      "                    1570273260,\n",
      "                    1570359660,\n",
      "                    1570446060,\n",
      "                    1570532460,\n",
      "                    1570618860,\n",
      "                    1570705260,\n",
      "                    1570791660,\n",
      "                    1570878060,\n",
      "                    1570964460,\n",
      "                    1571050860,\n",
      "                    1571137260,\n",
      "                    1571223660,\n",
      "                    1571310060,\n",
      "                    1571396460,\n",
      "                    1571482860,\n",
      "                    1571569260,\n",
      "                    1571655660,\n",
      "                    1571742060,\n",
      "                    1571828460,\n",
      "                    1571914860,\n",
      "                    1572001260,\n",
      "                    1572087660,\n",
      "                    1572177660,\n",
      "                    1572264060,\n",
      "                    1572350460,\n",
      "                    1572436860,\n",
      "                    1572523260,\n",
      "                    1572609660,\n",
      "                    1572696060,\n",
      "                    1572782460,\n",
      "                    1572868860,\n",
      "                    1572955260,\n",
      "                    1573041660,\n",
      "                    1573128060,\n",
      "                    1573214460,\n",
      "                    1573300860,\n",
      "                    1573387260,\n",
      "                    1573473660,\n",
      "                    1573560060,\n",
      "                    1573646460,\n",
      "                    1573732860,\n",
      "                    1573819260,\n",
      "                    1573905660,\n",
      "                    1573992060,\n",
      "                    1574078460,\n",
      "                    1574164860,\n",
      "                    1574251260,\n",
      "                    1574337660,\n",
      "                    1574424060\n",
      "                ],\n",
      "                \"labels\": [\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    0,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    2,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3,\n",
      "                    3\n",
      "                ],\n",
      "                \"atypical\": [\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    true,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false,\n",
      "                    false\n",
      "                ],\n",
      "                \"source_id\": \"u0002\"\n",
      "            }\n",
      "        ]\n",
      "    },\n",
      "    \"inputs\": {\n",
      "        \"experiment\": \"BlackSheep\",\n",
      "        \"feature\": \"BlackSheep\",\n",
      "        \"dataType\": \"waveform\",\n",
      "        \"UUID\": [\n",
      "            \"u0001\",\n",
      "            \"u0001\",\n",
      "            \"u0001\",\n",
      "            \"u0001\",\n",
      "            \"u0001\",\n",
      "            \"u0001\",\n",
      "            \"u0001\",\n",
      "            \"u0001\",\n",
      "            \"u0001\",\n",
      "            \"u0004\",\n",
      "            \"u0002\",\n",
      "            \"u0003\",\n",
      "            \"u0001\"\n",
      "        ],\n",
      "        \"black_sheep\": true,\n",
      "        \"data-commit\": \"\",\n",
      "        \"n_trials\": 10,\n",
      "        \"force_create_model\": true,\n",
      "        \"load_model\": \"\",\n",
      "        \"save\": false,\n",
      "        \"complex\": false,\n",
      "        \"preprocessor_functions\": [\n",
      "            \"downselect\"\n",
      "        ],\n",
      "        \"preproc_params\": {\n",
      "            \"MINIMUM_REQUIRED_ROWS\": 20,\n",
      "            \"DFT_FREQ_RESOLUTION\": 0.2,\n",
      "            \"CORRELATION_THRESHOLD\": 0.5\n",
      "        },\n",
      "        \"timestamps\": [\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ],\n",
      "            [\n",
      "                1570186860,\n",
      "                1570273260,\n",
      "                1570359660,\n",
      "                1570446060,\n",
      "                1570532460,\n",
      "                1570618860,\n",
      "                1570705260,\n",
      "                1570791660,\n",
      "                1570878060,\n",
      "                1570964460,\n",
      "                1571050860,\n",
      "                1571137260,\n",
      "                1571223660,\n",
      "                1571310060,\n",
      "                1571396460,\n",
      "                1571482860,\n",
      "                1571569260,\n",
      "                1571655660,\n",
      "                1571742060,\n",
      "                1571828460,\n",
      "                1571914860,\n",
      "                1572001260,\n",
      "                1572087660,\n",
      "                1572177660,\n",
      "                1572264060,\n",
      "                1572350460,\n",
      "                1572436860,\n",
      "                1572523260,\n",
      "                1572609660,\n",
      "                1572696060,\n",
      "                1572782460,\n",
      "                1572868860,\n",
      "                1572955260,\n",
      "                1573041660,\n",
      "                1573128060,\n",
      "                1573214460,\n",
      "                1573300860,\n",
      "                1573387260,\n",
      "                1573473660,\n",
      "                1573560060,\n",
      "                1573646460,\n",
      "                1573732860,\n",
      "                1573819260,\n",
      "                1573905660,\n",
      "                1573992060,\n",
      "                1574078460,\n",
      "                1574164860,\n",
      "                1574251260,\n",
      "                1574337660,\n",
      "                1574424060\n",
      "            ]\n",
      "        ],\n",
      "        \"algo_params\": {\n",
      "            \"look_back\": 1,\n",
      "            \"number_of_modes\": 4,\n",
      "            \"model_sparsity_factor\": 0.11,\n",
      "            \"smoothening_factor\": 1,\n",
      "            \"max_iterations\": 20,\n",
      "            \"threshold\": 0\n",
      "        }\n",
      "    },\n",
      "    \"error_info\": \"\",\n",
      "    \"debug_info\": \"\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Specific signature for BlackSheep\n",
    "POPULATION_SOURCES = [\"u0001\",\"u0001\",\"u0001\",\"u0001\",\"u0001\",\"u0001\",\"u0001\",\"u0001\",\"u0001\",\"u0004\",\"u0002\",\"u0003\",\"u0001\"]\n",
    "analysis_request = session.request_population_analysis(POPULATION_SOURCES, \"BlackSheep\", parameters={\"atypical_threshold\": 0.15})\n",
    "\n",
    "# Generic part, same as above\n",
    "print(f\"Waiting for {analysis_request}\")\n",
    "session.wait_for_analyses([analysis_request[\"request_id\"]])\n",
    "raw_result = session.get_analysis_results(analysis_request[\"request_id\"])\n",
    "print(json.dumps(raw_result, sort_keys=False, indent=4)) # Pretty but long\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Using the analysis classes\n",
    "We use exactly the same code as above to inspect the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-18T10:00:53.012148Z",
     "start_time": "2021-03-18T10:00:52.486345Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== BlackSheep ===\n",
      "request_id 8f45d56950eea95e8382b57d1aec5746\n",
      "\n",
      "+----+----------+------------+\n",
      "|    | source   | atypical   |\n",
      "|----+----------+------------|\n",
      "|  0 | u0001    | False      |\n",
      "|  1 | u0001    | False      |\n",
      "|  2 | u0001    | False      |\n",
      "|  3 | u0001    | False      |\n",
      "|  4 | u0001    | False      |\n",
      "|  5 | u0001    | False      |\n",
      "|  6 | u0001    | False      |\n",
      "|  7 | u0001    | False      |\n",
      "|  8 | u0001    | False      |\n",
      "|  9 | u0004    | False      |\n",
      "| 10 | u0002    | True       |\n",
      "| 11 | u0003    | True       |\n",
      "| 12 | u0001    | False      |\n",
      "+----+----------+------------+\n",
      "\n",
      "+------------+-----+\n",
      "| atypical   |   N |\n",
      "|------------+-----|\n",
      "| False      |  11 |\n",
      "| True       |   2 |\n",
      "+------------+-----+\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Sergio\\Documents\\GitHub\\mvg\\mvg\\analysis_classes.py:131: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dframe[\"datetime\"] = dt_col\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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ckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREckNBTUREcqNdpRPQGjz88SuVTkKzMaLvsEonQUpA+1GaKz2piYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbiioiYhIbjR5UDOz3mb2iJm9m/72yow71szeM7O3zWxEZvjqZvZaGneemVkaflAa/oqZ/dvMBjd1+kVEpOUox5PaMcCj7r488Gj6TgpIuwBDgJHARWbWNs1zMXAAsHz6jEzDb3T3ld19GHA68NcypF9ERFqIkgU1MxtoZq9nvv/GzE4ERgHXpsHXAtum/0cBN7v7LHf/AHgPWMvMlgC6u/sz7u7AdYV53H1aZpVdAC9V+kVEpOVrV4Z1LObukwHcfbKZLZqG9wOezUw3MQ2bnf4vHg6Amf0KOBLoAGzShOkWEZEWppINRayKYV7D8PjH/UJ3Xxb4HfDHKhdsdoCZvWhmL85mVkkSKyIizV8pg9qcouV1Sn8/TUWKpL+fpeETgQGZ6fsDH6fh/asYXuxm5hdlLsDdL3P3Ndx9jfZ0rO92iIhIC1XKoPYpsKiZLWxmHYGt0vB7gNHp/9HA3Znhu5hZRzNbmmgQ8nwqqpxuZuukVo97FeYxs+Uz69sS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\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "''"
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Parse\n",
    "pretty_result = analysis_classes.parse_results(raw_result, \"Europe/Stockholm\", \"s\")\n",
    "# Show summary\n",
    "pretty_result.summary()\n",
    "pretty_result.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Serializing\n",
    "Finally, we can save the object including the results to pickle. If no name is given it is saved under the name \\<request_id>.pkl."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving BlackSheep object to 8f45d56950eea95e8382b57d1aec5746.pkl\n"
     ]
    },
    {
     "data": {
      "text/plain": "'8f45d56950eea95e8382b57d1aec5746.pkl'"
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pretty_result.save_pkl()\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}