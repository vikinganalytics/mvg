name: ci-checks

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true

jobs:
    black: 
        runs-on: [ ubuntu-latest ]
        name: "running black"
        steps: 
        -   uses: actions/checkout@v2
        -   name: "Set up Python 3"
            uses: actions/setup-python@v2
            with: 
                python-version: '3.x'
        -   name: "Install dependencies"
            run: "pip install -r requirements_dev.txt"
        -   name: "Run black!"
            run: "black --check ."
    pylint: 
        runs-on: [ ubuntu-latest ]
        name: "running pylint"
        steps: 
        -   uses: actions/checkout@v2
        -   name: "Set up Python 3"
            uses: actions/setup-python@v2
            with: 
                python-version: '3.x'
        -   name: "Install dependencies"
            run: |
                pip install -r requirements.txt 
                pip install -r requirements_dev.txt
        -   name: "Run pylint!"
            run: "pylint mvg"
    flake8: 
        runs-on: [ ubuntu-latest ]
        name: "running flake8"
        steps: 
        -   uses: actions/checkout@v2
        -   name: "Set up Python 3"
            uses: actions/setup-python@v2
            with: 
                python-version: '3.x'
        -   name: "Install dependencies"
            run: "pip install -r requirements_dev.txt"
        -   name: "Run flake8!"
            run: "flake8 mvg"
    pytest: 
        runs-on: [ ubuntu-latest ]
        needs: [black, pylint, flake8]
        strategy:
            matrix:
              python-version: [3.6,3.7,3.8,3.9,"3.10"]
        steps: 
        -   uses: actions/checkout@v2
        -   name: "Set up Python ${{ matrix.python-version }}"
            uses: actions/setup-python@v2
            with: 
                python-version: "${{ matrix.python-version }}"
        -   name: "Install dependencies"
            run: |
                pip install -r requirements.txt
                pip install -r requirements_dev.txt
        -   name: Login to GHCR
            uses: docker/login-action@v1
            with:
                registry: ghcr.io
                username: vagrinder
                password: ${{ secrets.VAGRINDER_GITHUB_PKG_TOKEN }}
        -   name: "Running tests with pytest"
            env:
                TEST_TOKEN: ${{ secrets.TEST_TOKEN }}
            run: "python -m pytest --verbose tests/"
    validate-documentation-examples:
        runs-on: [ ubuntu-latest ]
        needs: [black, pylint, flake8]
        name: "Validate examples in documentation"
        steps:
        -   uses: actions/checkout@v2
        -   name: "Install dependencies"
            run: |
                pip install notebook tqdm ipywidgets
                pip install -r requirements.txt
        -   name: "Setup MVG"
            run: |
                pip install .
        -   name: "Run all examples"
            env:
                TEST_TOKEN: ${{ secrets.TEST_TOKEN }}
                EXAMPLES_DIR: 'docs/source/content/examples'
            run: |
                echo "Running notebooks containing examples"
                jupyter nbconvert --execute --to notebook --inplace ${{env.EXAMPLES_DIR}}/check_version.ipynb \
                                                                    ${{env.EXAMPLES_DIR}}/brief_overview.ipynb \
                                                                    ${{env.EXAMPLES_DIR}}/sources_and_measurements.ipynb \
                                                                    ${{env.EXAMPLES_DIR}}/tabular_example.ipynb \
                                                                    ${{env.EXAMPLES_DIR}}/error_handling.ipynb \
                                                                    ${{env.EXAMPLES_DIR}}/analysis_classes.ipynb \
                                                                    ${{env.EXAMPLES_DIR}}/analysis_visual.ipynb \
                                                                    ${{env.EXAMPLES_DIR}}/labeling.ipynb
                echo "Done"
